
FINALPROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000087c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08000a40  08000a40  00001a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b40  08000b40  00001b48  2**0
                  CONTENTS
  4 .ARM          00000000  08000b40  08000b40  00001b48  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b40  08000b48  00001b48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b40  08000b40  00001b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000b44  08000b44  00001b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001b48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000b48  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000b48  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00001b48  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001359  00000000  00000000  00001b72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000641  00000000  00000000  00002ecb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000138  00000000  00000000  00003510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000ca  00000000  00000000  00003648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ce9e  00000000  00000000  00003712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000237b  00000000  00000000  000105b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000453a5  00000000  00000000  0001292b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00057cd0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000031c  00000000  00000000  00057d14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00058030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000a28 	.word	0x08000a28

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000a28 	.word	0x08000a28

08000204 <__aeabi_frsub>:
 8000204:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000208:	e002      	b.n	8000210 <__addsf3>
 800020a:	bf00      	nop

0800020c <__aeabi_fsub>:
 800020c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000210 <__addsf3>:
 8000210:	0042      	lsls	r2, r0, #1
 8000212:	bf1f      	itttt	ne
 8000214:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000218:	ea92 0f03 	teqne	r2, r3
 800021c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000220:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000224:	d06a      	beq.n	80002fc <__addsf3+0xec>
 8000226:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800022a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800022e:	bfc1      	itttt	gt
 8000230:	18d2      	addgt	r2, r2, r3
 8000232:	4041      	eorgt	r1, r0
 8000234:	4048      	eorgt	r0, r1
 8000236:	4041      	eorgt	r1, r0
 8000238:	bfb8      	it	lt
 800023a:	425b      	neglt	r3, r3
 800023c:	2b19      	cmp	r3, #25
 800023e:	bf88      	it	hi
 8000240:	4770      	bxhi	lr
 8000242:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000246:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800024a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800024e:	bf18      	it	ne
 8000250:	4240      	negne	r0, r0
 8000252:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000256:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800025a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800025e:	bf18      	it	ne
 8000260:	4249      	negne	r1, r1
 8000262:	ea92 0f03 	teq	r2, r3
 8000266:	d03f      	beq.n	80002e8 <__addsf3+0xd8>
 8000268:	f1a2 0201 	sub.w	r2, r2, #1
 800026c:	fa41 fc03 	asr.w	ip, r1, r3
 8000270:	eb10 000c 	adds.w	r0, r0, ip
 8000274:	f1c3 0320 	rsb	r3, r3, #32
 8000278:	fa01 f103 	lsl.w	r1, r1, r3
 800027c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000280:	d502      	bpl.n	8000288 <__addsf3+0x78>
 8000282:	4249      	negs	r1, r1
 8000284:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000288:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800028c:	d313      	bcc.n	80002b6 <__addsf3+0xa6>
 800028e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000292:	d306      	bcc.n	80002a2 <__addsf3+0x92>
 8000294:	0840      	lsrs	r0, r0, #1
 8000296:	ea4f 0131 	mov.w	r1, r1, rrx
 800029a:	f102 0201 	add.w	r2, r2, #1
 800029e:	2afe      	cmp	r2, #254	@ 0xfe
 80002a0:	d251      	bcs.n	8000346 <__addsf3+0x136>
 80002a2:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80002a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002aa:	bf08      	it	eq
 80002ac:	f020 0001 	biceq.w	r0, r0, #1
 80002b0:	ea40 0003 	orr.w	r0, r0, r3
 80002b4:	4770      	bx	lr
 80002b6:	0049      	lsls	r1, r1, #1
 80002b8:	eb40 0000 	adc.w	r0, r0, r0
 80002bc:	3a01      	subs	r2, #1
 80002be:	bf28      	it	cs
 80002c0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80002c4:	d2ed      	bcs.n	80002a2 <__addsf3+0x92>
 80002c6:	fab0 fc80 	clz	ip, r0
 80002ca:	f1ac 0c08 	sub.w	ip, ip, #8
 80002ce:	ebb2 020c 	subs.w	r2, r2, ip
 80002d2:	fa00 f00c 	lsl.w	r0, r0, ip
 80002d6:	bfaa      	itet	ge
 80002d8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002dc:	4252      	neglt	r2, r2
 80002de:	4318      	orrge	r0, r3
 80002e0:	bfbc      	itt	lt
 80002e2:	40d0      	lsrlt	r0, r2
 80002e4:	4318      	orrlt	r0, r3
 80002e6:	4770      	bx	lr
 80002e8:	f092 0f00 	teq	r2, #0
 80002ec:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80002f0:	bf06      	itte	eq
 80002f2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80002f6:	3201      	addeq	r2, #1
 80002f8:	3b01      	subne	r3, #1
 80002fa:	e7b5      	b.n	8000268 <__addsf3+0x58>
 80002fc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000300:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000304:	bf18      	it	ne
 8000306:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800030a:	d021      	beq.n	8000350 <__addsf3+0x140>
 800030c:	ea92 0f03 	teq	r2, r3
 8000310:	d004      	beq.n	800031c <__addsf3+0x10c>
 8000312:	f092 0f00 	teq	r2, #0
 8000316:	bf08      	it	eq
 8000318:	4608      	moveq	r0, r1
 800031a:	4770      	bx	lr
 800031c:	ea90 0f01 	teq	r0, r1
 8000320:	bf1c      	itt	ne
 8000322:	2000      	movne	r0, #0
 8000324:	4770      	bxne	lr
 8000326:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800032a:	d104      	bne.n	8000336 <__addsf3+0x126>
 800032c:	0040      	lsls	r0, r0, #1
 800032e:	bf28      	it	cs
 8000330:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000334:	4770      	bx	lr
 8000336:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800033a:	bf3c      	itt	cc
 800033c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000340:	4770      	bxcc	lr
 8000342:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000346:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800034a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800034e:	4770      	bx	lr
 8000350:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000354:	bf16      	itet	ne
 8000356:	4608      	movne	r0, r1
 8000358:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800035c:	4601      	movne	r1, r0
 800035e:	0242      	lsls	r2, r0, #9
 8000360:	bf06      	itte	eq
 8000362:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000366:	ea90 0f01 	teqeq	r0, r1
 800036a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800036e:	4770      	bx	lr

08000370 <__aeabi_ui2f>:
 8000370:	f04f 0300 	mov.w	r3, #0
 8000374:	e004      	b.n	8000380 <__aeabi_i2f+0x8>
 8000376:	bf00      	nop

08000378 <__aeabi_i2f>:
 8000378:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800037c:	bf48      	it	mi
 800037e:	4240      	negmi	r0, r0
 8000380:	ea5f 0c00 	movs.w	ip, r0
 8000384:	bf08      	it	eq
 8000386:	4770      	bxeq	lr
 8000388:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800038c:	4601      	mov	r1, r0
 800038e:	f04f 0000 	mov.w	r0, #0
 8000392:	e01c      	b.n	80003ce <__aeabi_l2f+0x2a>

08000394 <__aeabi_ul2f>:
 8000394:	ea50 0201 	orrs.w	r2, r0, r1
 8000398:	bf08      	it	eq
 800039a:	4770      	bxeq	lr
 800039c:	f04f 0300 	mov.w	r3, #0
 80003a0:	e00a      	b.n	80003b8 <__aeabi_l2f+0x14>
 80003a2:	bf00      	nop

080003a4 <__aeabi_l2f>:
 80003a4:	ea50 0201 	orrs.w	r2, r0, r1
 80003a8:	bf08      	it	eq
 80003aa:	4770      	bxeq	lr
 80003ac:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80003b0:	d502      	bpl.n	80003b8 <__aeabi_l2f+0x14>
 80003b2:	4240      	negs	r0, r0
 80003b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003b8:	ea5f 0c01 	movs.w	ip, r1
 80003bc:	bf02      	ittt	eq
 80003be:	4684      	moveq	ip, r0
 80003c0:	4601      	moveq	r1, r0
 80003c2:	2000      	moveq	r0, #0
 80003c4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80003c8:	bf08      	it	eq
 80003ca:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80003ce:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80003d2:	fabc f28c 	clz	r2, ip
 80003d6:	3a08      	subs	r2, #8
 80003d8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003dc:	db10      	blt.n	8000400 <__aeabi_l2f+0x5c>
 80003de:	fa01 fc02 	lsl.w	ip, r1, r2
 80003e2:	4463      	add	r3, ip
 80003e4:	fa00 fc02 	lsl.w	ip, r0, r2
 80003e8:	f1c2 0220 	rsb	r2, r2, #32
 80003ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003f0:	fa20 f202 	lsr.w	r2, r0, r2
 80003f4:	eb43 0002 	adc.w	r0, r3, r2
 80003f8:	bf08      	it	eq
 80003fa:	f020 0001 	biceq.w	r0, r0, #1
 80003fe:	4770      	bx	lr
 8000400:	f102 0220 	add.w	r2, r2, #32
 8000404:	fa01 fc02 	lsl.w	ip, r1, r2
 8000408:	f1c2 0220 	rsb	r2, r2, #32
 800040c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000410:	fa21 f202 	lsr.w	r2, r1, r2
 8000414:	eb43 0002 	adc.w	r0, r3, r2
 8000418:	bf08      	it	eq
 800041a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800041e:	4770      	bx	lr

08000420 <__aeabi_f2uiz>:
 8000420:	0042      	lsls	r2, r0, #1
 8000422:	d20e      	bcs.n	8000442 <__aeabi_f2uiz+0x22>
 8000424:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000428:	d30b      	bcc.n	8000442 <__aeabi_f2uiz+0x22>
 800042a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800042e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000432:	d409      	bmi.n	8000448 <__aeabi_f2uiz+0x28>
 8000434:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000438:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800043c:	fa23 f002 	lsr.w	r0, r3, r2
 8000440:	4770      	bx	lr
 8000442:	f04f 0000 	mov.w	r0, #0
 8000446:	4770      	bx	lr
 8000448:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800044c:	d101      	bne.n	8000452 <__aeabi_f2uiz+0x32>
 800044e:	0242      	lsls	r2, r0, #9
 8000450:	d102      	bne.n	8000458 <__aeabi_f2uiz+0x38>
 8000452:	f04f 30ff 	mov.w	r0, #4294967295
 8000456:	4770      	bx	lr
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop

08000460 <int_btn_pressed>:
	GPIOC->MODER &=~(3<16);  //Configuring Port-C8 to made input
	GPIOC->OSPEEDR |=(1<<16);
	GPIOC->PUPDR |=(2<<16);
}

int int_btn_pressed() {
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
    return (!(GPIOC->IDR & (1 << 13)));
 8000464:	4b06      	ldr	r3, [pc, #24]	@ (8000480 <int_btn_pressed+0x20>)
 8000466:	691b      	ldr	r3, [r3, #16]
 8000468:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800046c:	2b00      	cmp	r3, #0
 800046e:	bf0c      	ite	eq
 8000470:	2301      	moveq	r3, #1
 8000472:	2300      	movne	r3, #0
 8000474:	b2db      	uxtb	r3, r3
}
 8000476:	4618      	mov	r0, r3
 8000478:	46bd      	mov	sp, r7
 800047a:	bc80      	pop	{r7}
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	40020800 	.word	0x40020800

08000484 <ext_btn_pressed>:

int ext_btn_pressed() {
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
	return !(GPIOC->IDR & (1 << 8));
 8000488:	4b06      	ldr	r3, [pc, #24]	@ (80004a4 <ext_btn_pressed+0x20>)
 800048a:	691b      	ldr	r3, [r3, #16]
 800048c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000490:	2b00      	cmp	r3, #0
 8000492:	bf0c      	ite	eq
 8000494:	2301      	moveq	r3, #1
 8000496:	2300      	movne	r3, #0
 8000498:	b2db      	uxtb	r3, r3
}
 800049a:	4618      	mov	r0, r3
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	40020800 	.word	0x40020800

080004a8 <SysClockConfig>:


#include "clock.h"
#include "stm32f446xx.h"

void SysClockConfig(void) {
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
    #define PLL_M 4
    #define PLL_N 180
    #define PLL_P 0  // PLLP = 2

    RCC->CR |= RCC_CR_HSEON; // Enable HSE
 80004ac:	4b27      	ldr	r3, [pc, #156]	@ (800054c <SysClockConfig+0xa4>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a26      	ldr	r2, [pc, #152]	@ (800054c <SysClockConfig+0xa4>)
 80004b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80004b6:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSERDY)); // Wait for HSE to be ready
 80004b8:	bf00      	nop
 80004ba:	4b24      	ldr	r3, [pc, #144]	@ (800054c <SysClockConfig+0xa4>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d0f9      	beq.n	80004ba <SysClockConfig+0x12>

    RCC->APB1ENR |= RCC_APB1ENR_PWREN; // Enable power interface clock
 80004c6:	4b21      	ldr	r3, [pc, #132]	@ (800054c <SysClockConfig+0xa4>)
 80004c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004ca:	4a20      	ldr	r2, [pc, #128]	@ (800054c <SysClockConfig+0xa4>)
 80004cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004d0:	6413      	str	r3, [r2, #64]	@ 0x40
    PWR->CR |= PWR_CR_VOS; // Set voltage regulator
 80004d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000550 <SysClockConfig+0xa8>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a1e      	ldr	r2, [pc, #120]	@ (8000550 <SysClockConfig+0xa8>)
 80004d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80004dc:	6013      	str	r3, [r2, #0]

    FLASH->ACR = FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY_5WS; // Flash settings
 80004de:	4b1d      	ldr	r3, [pc, #116]	@ (8000554 <SysClockConfig+0xac>)
 80004e0:	f240 7205 	movw	r2, #1797	@ 0x705
 80004e4:	601a      	str	r2, [r3, #0]

    RCC->CFGR |= RCC_CFGR_HPRE_DIV1; // AHB prescaler
 80004e6:	4b19      	ldr	r3, [pc, #100]	@ (800054c <SysClockConfig+0xa4>)
 80004e8:	4a18      	ldr	r2, [pc, #96]	@ (800054c <SysClockConfig+0xa4>)
 80004ea:	689b      	ldr	r3, [r3, #8]
 80004ec:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4; // APB1 prescaler
 80004ee:	4b17      	ldr	r3, [pc, #92]	@ (800054c <SysClockConfig+0xa4>)
 80004f0:	689b      	ldr	r3, [r3, #8]
 80004f2:	4a16      	ldr	r2, [pc, #88]	@ (800054c <SysClockConfig+0xa4>)
 80004f4:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 80004f8:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2; // APB2 prescaler
 80004fa:	4b14      	ldr	r3, [pc, #80]	@ (800054c <SysClockConfig+0xa4>)
 80004fc:	689b      	ldr	r3, [r3, #8]
 80004fe:	4a13      	ldr	r2, [pc, #76]	@ (800054c <SysClockConfig+0xa4>)
 8000500:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000504:	6093      	str	r3, [r2, #8]

    RCC->PLLCFGR = (PLL_M << 0) | (PLL_N << 6) | (PLL_P << 16) | (RCC_PLLCFGR_PLLSRC_HSE); // Configure PLL
 8000506:	4b11      	ldr	r3, [pc, #68]	@ (800054c <SysClockConfig+0xa4>)
 8000508:	4a13      	ldr	r2, [pc, #76]	@ (8000558 <SysClockConfig+0xb0>)
 800050a:	605a      	str	r2, [r3, #4]

    RCC->CR |= RCC_CR_PLLON; // Enable PLL
 800050c:	4b0f      	ldr	r3, [pc, #60]	@ (800054c <SysClockConfig+0xa4>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a0e      	ldr	r2, [pc, #56]	@ (800054c <SysClockConfig+0xa4>)
 8000512:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000516:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_PLLRDY)); // Wait for PLL to be ready
 8000518:	bf00      	nop
 800051a:	4b0c      	ldr	r3, [pc, #48]	@ (800054c <SysClockConfig+0xa4>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0f9      	beq.n	800051a <SysClockConfig+0x72>

    RCC->CFGR |= RCC_CFGR_SW_PLL; // Select PLL as system clock source
 8000526:	4b09      	ldr	r3, [pc, #36]	@ (800054c <SysClockConfig+0xa4>)
 8000528:	689b      	ldr	r3, [r3, #8]
 800052a:	4a08      	ldr	r2, [pc, #32]	@ (800054c <SysClockConfig+0xa4>)
 800052c:	f043 0302 	orr.w	r3, r3, #2
 8000530:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL); // Wait for PLL to be used
 8000532:	bf00      	nop
 8000534:	4b05      	ldr	r3, [pc, #20]	@ (800054c <SysClockConfig+0xa4>)
 8000536:	689b      	ldr	r3, [r3, #8]
 8000538:	f003 030c 	and.w	r3, r3, #12
 800053c:	2b08      	cmp	r3, #8
 800053e:	d1f9      	bne.n	8000534 <SysClockConfig+0x8c>
}
 8000540:	bf00      	nop
 8000542:	bf00      	nop
 8000544:	46bd      	mov	sp, r7
 8000546:	bc80      	pop	{r7}
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	40023800 	.word	0x40023800
 8000550:	40007000 	.word	0x40007000
 8000554:	40023c00 	.word	0x40023c00
 8000558:	00402d04 	.word	0x00402d04

0800055c <delay>:
#include "button.h"
#include "stm32f446xx.h"
#include <stdlib.h>
#include <stdio.h>

void delay(uint32_t n){
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	for(int i = 0; i<1000000*n; i++);
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	e002      	b.n	8000570 <delay+0x14>
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	3301      	adds	r3, #1
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4a06      	ldr	r2, [pc, #24]	@ (800058c <delay+0x30>)
 8000574:	fb03 f202 	mul.w	r2, r3, r2
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	429a      	cmp	r2, r3
 800057c:	d8f5      	bhi.n	800056a <delay+0xe>
}
 800057e:	bf00      	nop
 8000580:	bf00      	nop
 8000582:	3714      	adds	r7, #20
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	000f4240 	.word	0x000f4240

08000590 <LED_init>:

void LED_init(){
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |=(1<<0);
 8000594:	4b10      	ldr	r3, [pc, #64]	@ (80005d8 <LED_init+0x48>)
 8000596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000598:	4a0f      	ldr	r2, [pc, #60]	@ (80005d8 <LED_init+0x48>)
 800059a:	f043 0301 	orr.w	r3, r3, #1
 800059e:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER |=(1<<10);
 80005a0:	4b0e      	ldr	r3, [pc, #56]	@ (80005dc <LED_init+0x4c>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0d      	ldr	r2, [pc, #52]	@ (80005dc <LED_init+0x4c>)
 80005a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005aa:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &=~(1<<5);
 80005ac:	4b0b      	ldr	r3, [pc, #44]	@ (80005dc <LED_init+0x4c>)
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	4a0a      	ldr	r2, [pc, #40]	@ (80005dc <LED_init+0x4c>)
 80005b2:	f023 0320 	bic.w	r3, r3, #32
 80005b6:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR |=(1<<10);
 80005b8:	4b08      	ldr	r3, [pc, #32]	@ (80005dc <LED_init+0x4c>)
 80005ba:	689b      	ldr	r3, [r3, #8]
 80005bc:	4a07      	ldr	r2, [pc, #28]	@ (80005dc <LED_init+0x4c>)
 80005be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005c2:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &=~(3<<10);
 80005c4:	4b05      	ldr	r3, [pc, #20]	@ (80005dc <LED_init+0x4c>)
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	4a04      	ldr	r2, [pc, #16]	@ (80005dc <LED_init+0x4c>)
 80005ca:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80005ce:	60d3      	str	r3, [r2, #12]
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr
 80005d8:	40023800 	.word	0x40023800
 80005dc:	40020000 	.word	0x40020000

080005e0 <blink>:

void blink(float n){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	GPIOA->ODR ^=(1<<5);
 80005e8:	4b08      	ldr	r3, [pc, #32]	@ (800060c <blink+0x2c>)
 80005ea:	695b      	ldr	r3, [r3, #20]
 80005ec:	4a07      	ldr	r2, [pc, #28]	@ (800060c <blink+0x2c>)
 80005ee:	f083 0320 	eor.w	r3, r3, #32
 80005f2:	6153      	str	r3, [r2, #20]
	delay(n);
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f7ff ff13 	bl	8000420 <__aeabi_f2uiz>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff ffad 	bl	800055c <delay>
}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40020000 	.word	0x40020000

08000610 <LED_Blinking>:

void LED_Blinking(){
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
	//float delay_values[]={1, 2, 3, 4};
	//int i=0;
	int delay_value =1;
 8000616:	2301      	movs	r3, #1
 8000618:	607b      	str	r3, [r7, #4]

	while(1){
		//blink(delay_values[i]);
		blink(delay_value);
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff feac 	bl	8000378 <__aeabi_i2f>
 8000620:	4603      	mov	r3, r0
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff ffdc 	bl	80005e0 <blink>
		if (int_btn_pressed()) {
 8000628:	f7ff ff1a 	bl	8000460 <int_btn_pressed>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d00d      	beq.n	800064e <LED_Blinking+0x3e>

			delay_value += 1;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	3301      	adds	r3, #1
 8000636:	607b      	str	r3, [r7, #4]
			if(delay_value >=4){
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2b03      	cmp	r3, #3
 800063c:	dd01      	ble.n	8000642 <LED_Blinking+0x32>
				delay_value =1;
 800063e:	2301      	movs	r3, #1
 8000640:	607b      	str	r3, [r7, #4]
//			if (i<3){
//				i++;
//			}else{
//				i=0;
//			}
			while(int_btn_pressed());
 8000642:	bf00      	nop
 8000644:	f7ff ff0c 	bl	8000460 <int_btn_pressed>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d1fa      	bne.n	8000644 <LED_Blinking+0x34>
		}
		if(ext_btn_pressed()){
 800064e:	f7ff ff19 	bl	8000484 <ext_btn_pressed>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d0e0      	beq.n	800061a <LED_Blinking+0xa>
			GPIOA->ODR &=~(1<<5);
 8000658:	4b05      	ldr	r3, [pc, #20]	@ (8000670 <LED_Blinking+0x60>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	4a04      	ldr	r2, [pc, #16]	@ (8000670 <LED_Blinking+0x60>)
 800065e:	f023 0320 	bic.w	r3, r3, #32
 8000662:	6153      	str	r3, [r2, #20]

			break;
 8000664:	bf00      	nop
		}
	}
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40020000 	.word	0x40020000

08000674 <PWM_config>:
#include <pwm.h>
#include "stm32f446xx.h"
#include "usart.h"
#include "button.h"

void PWM_config(void) {
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |=(1<<0);
 8000678:	4b19      	ldr	r3, [pc, #100]	@ (80006e0 <PWM_config+0x6c>)
 800067a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067c:	4a18      	ldr	r2, [pc, #96]	@ (80006e0 <PWM_config+0x6c>)
 800067e:	f043 0301 	orr.w	r3, r3, #1
 8000682:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB1ENR |=(1<<0);
 8000684:	4b16      	ldr	r3, [pc, #88]	@ (80006e0 <PWM_config+0x6c>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	4a15      	ldr	r2, [pc, #84]	@ (80006e0 <PWM_config+0x6c>)
 800068a:	f043 0301 	orr.w	r3, r3, #1
 800068e:	6413      	str	r3, [r2, #64]	@ 0x40

	GPIOA->MODER |=(1<<1);
 8000690:	4b14      	ldr	r3, [pc, #80]	@ (80006e4 <PWM_config+0x70>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a13      	ldr	r2, [pc, #76]	@ (80006e4 <PWM_config+0x70>)
 8000696:	f043 0302 	orr.w	r3, r3, #2
 800069a:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |=(1<<0);
 800069c:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <PWM_config+0x70>)
 800069e:	6a1b      	ldr	r3, [r3, #32]
 80006a0:	4a10      	ldr	r2, [pc, #64]	@ (80006e4 <PWM_config+0x70>)
 80006a2:	f043 0301 	orr.w	r3, r3, #1
 80006a6:	6213      	str	r3, [r2, #32]

	TIM2->ARR=255;
 80006a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006ac:	22ff      	movs	r2, #255	@ 0xff
 80006ae:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CCMR1 = (1<<5) |(1<<6);
 80006b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006b4:	2260      	movs	r2, #96	@ 0x60
 80006b6:	619a      	str	r2, [r3, #24]
	TIM2->CCER |=(1<<0);
 80006b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006bc:	6a1b      	ldr	r3, [r3, #32]
 80006be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6213      	str	r3, [r2, #32]
	TIM2->CR1 |=(1<<0);
 80006c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006d2:	f043 0301 	orr.w	r3, r3, #1
 80006d6:	6013      	str	r3, [r2, #0]
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40020000 	.word	0x40020000

080006e8 <start_PWM_output>:

void start_PWM_output(void) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
	short brightness =0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	80fb      	strh	r3, [r7, #6]
	short fadeAmount =85;
 80006f2:	2355      	movs	r3, #85	@ 0x55
 80006f4:	80bb      	strh	r3, [r7, #4]

    UART2_SendString("Starting PWM output. Press the button to increase intensity.\n\r");
 80006f6:	481e      	ldr	r0, [pc, #120]	@ (8000770 <start_PWM_output+0x88>)
 80006f8:	f000 f856 	bl	80007a8 <UART2_SendString>

    while(1){
    	if (int_btn_pressed()) {
 80006fc:	f7ff feb0 	bl	8000460 <int_btn_pressed>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d01b      	beq.n	800073e <start_PWM_output+0x56>
    		TIM2->CCR1 =brightness;
 8000706:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800070a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800070e:	6353      	str	r3, [r2, #52]	@ 0x34
    		brightness += fadeAmount;
 8000710:	88fa      	ldrh	r2, [r7, #6]
 8000712:	88bb      	ldrh	r3, [r7, #4]
 8000714:	4413      	add	r3, r2
 8000716:	b29b      	uxth	r3, r3
 8000718:	80fb      	strh	r3, [r7, #6]
    		if(brightness <= 0 || brightness>=255){
 800071a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800071e:	2b00      	cmp	r3, #0
 8000720:	dd03      	ble.n	800072a <start_PWM_output+0x42>
 8000722:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000726:	2bfe      	cmp	r3, #254	@ 0xfe
 8000728:	dd03      	ble.n	8000732 <start_PWM_output+0x4a>
    		    fadeAmount =-fadeAmount;
 800072a:	88bb      	ldrh	r3, [r7, #4]
 800072c:	425b      	negs	r3, r3
 800072e:	b29b      	uxth	r3, r3
 8000730:	80bb      	strh	r3, [r7, #4]
    		}
    		while(int_btn_pressed());
 8000732:	bf00      	nop
 8000734:	f7ff fe94 	bl	8000460 <int_btn_pressed>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d1fa      	bne.n	8000734 <start_PWM_output+0x4c>
    	}
    	if(ext_btn_pressed()){
 800073e:	f7ff fea1 	bl	8000484 <ext_btn_pressed>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d0d9      	beq.n	80006fc <start_PWM_output+0x14>
    		TIM2->CCR1 =brightness;
 8000748:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800074c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000750:	6353      	str	r3, [r2, #52]	@ 0x34
    		if(brightness>0){
 8000752:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000756:	2b00      	cmp	r3, #0
 8000758:	dd01      	ble.n	800075e <start_PWM_output+0x76>
    			brightness=0;
 800075a:	2300      	movs	r3, #0
 800075c:	80fb      	strh	r3, [r7, #6]
    		}



			break;
 800075e:	bf00      	nop
    	}
    }

    UART2_SendString("Stopping PWM output.\n\r");
 8000760:	4804      	ldr	r0, [pc, #16]	@ (8000774 <start_PWM_output+0x8c>)
 8000762:	f000 f821 	bl	80007a8 <UART2_SendString>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	08000a40 	.word	0x08000a40
 8000774:	08000a80 	.word	0x08000a80

08000778 <UART2_SendChar>:


#include "usart.h"
#include "stm32f446xx.h"

void UART2_SendChar(char ch) {
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
    USART2->DR = ch;
 8000782:	4a08      	ldr	r2, [pc, #32]	@ (80007a4 <UART2_SendChar+0x2c>)
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	6053      	str	r3, [r2, #4]
    while (!(USART2->SR & (1 << 6))); // Wait for transmission complete
 8000788:	bf00      	nop
 800078a:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <UART2_SendChar+0x2c>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000792:	2b00      	cmp	r3, #0
 8000794:	d0f9      	beq.n	800078a <UART2_SendChar+0x12>
}
 8000796:	bf00      	nop
 8000798:	bf00      	nop
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	40004400 	.word	0x40004400

080007a8 <UART2_SendString>:

void UART2_SendString(char *string) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
    while (*string != '\0') {
 80007b0:	e007      	b.n	80007c2 <UART2_SendString+0x1a>
        UART2_SendChar(*string);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff ffde 	bl	8000778 <UART2_SendChar>
        string++;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	3301      	adds	r3, #1
 80007c0:	607b      	str	r3, [r7, #4]
    while (*string != '\0') {
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d1f3      	bne.n	80007b2 <UART2_SendString+0xa>
    }
}
 80007ca:	bf00      	nop
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <USART2_config>:

void USART2_config(void) {
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1 << 2); // Enable GPIOC clock
 80007d8:	4b32      	ldr	r3, [pc, #200]	@ (80008a4 <USART2_config+0xd0>)
 80007da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007dc:	4a31      	ldr	r2, [pc, #196]	@ (80008a4 <USART2_config+0xd0>)
 80007de:	f043 0304 	orr.w	r3, r3, #4
 80007e2:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->AHB1ENR |= (1 << 0); // Enable GPIOA clock
 80007e4:	4b2f      	ldr	r3, [pc, #188]	@ (80008a4 <USART2_config+0xd0>)
 80007e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e8:	4a2e      	ldr	r2, [pc, #184]	@ (80008a4 <USART2_config+0xd0>)
 80007ea:	f043 0301 	orr.w	r3, r3, #1
 80007ee:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= (1 << 17); // Enable USART2 clock
 80007f0:	4b2c      	ldr	r3, [pc, #176]	@ (80008a4 <USART2_config+0xd0>)
 80007f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f4:	4a2b      	ldr	r2, [pc, #172]	@ (80008a4 <USART2_config+0xd0>)
 80007f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007fa:	6413      	str	r3, [r2, #64]	@ 0x40

    GPIOC->MODER &= ~(3 << 27); // PC13 input mode
 80007fc:	4b2a      	ldr	r3, [pc, #168]	@ (80008a8 <USART2_config+0xd4>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a29      	ldr	r2, [pc, #164]	@ (80008a8 <USART2_config+0xd4>)
 8000802:	f023 53c0 	bic.w	r3, r3, #402653184	@ 0x18000000
 8000806:	6013      	str	r3, [r2, #0]
    GPIOC->OSPEEDR |= (3 << 26); // High speed for PC13
 8000808:	4b27      	ldr	r3, [pc, #156]	@ (80008a8 <USART2_config+0xd4>)
 800080a:	689b      	ldr	r3, [r3, #8]
 800080c:	4a26      	ldr	r2, [pc, #152]	@ (80008a8 <USART2_config+0xd4>)
 800080e:	f043 6340 	orr.w	r3, r3, #201326592	@ 0xc000000
 8000812:	6093      	str	r3, [r2, #8]

    GPIOA->MODER |= (2 << 4); // PA2 alternate function mode
 8000814:	4b25      	ldr	r3, [pc, #148]	@ (80008ac <USART2_config+0xd8>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a24      	ldr	r2, [pc, #144]	@ (80008ac <USART2_config+0xd8>)
 800081a:	f043 0320 	orr.w	r3, r3, #32
 800081e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (2 << 6); // PA3 alternate function mode
 8000820:	4b22      	ldr	r3, [pc, #136]	@ (80008ac <USART2_config+0xd8>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a21      	ldr	r2, [pc, #132]	@ (80008ac <USART2_config+0xd8>)
 8000826:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800082a:	6013      	str	r3, [r2, #0]
    GPIOA->OSPEEDR |= (3 << 4); // High speed for PA2
 800082c:	4b1f      	ldr	r3, [pc, #124]	@ (80008ac <USART2_config+0xd8>)
 800082e:	689b      	ldr	r3, [r3, #8]
 8000830:	4a1e      	ldr	r2, [pc, #120]	@ (80008ac <USART2_config+0xd8>)
 8000832:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000836:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |= (3 << 6); // High speed for PA3
 8000838:	4b1c      	ldr	r3, [pc, #112]	@ (80008ac <USART2_config+0xd8>)
 800083a:	689b      	ldr	r3, [r3, #8]
 800083c:	4a1b      	ldr	r2, [pc, #108]	@ (80008ac <USART2_config+0xd8>)
 800083e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000842:	6093      	str	r3, [r2, #8]
    GPIOA->AFR[0] |= (7 << 8); // PA2 AF7 (USART2_TX)
 8000844:	4b19      	ldr	r3, [pc, #100]	@ (80008ac <USART2_config+0xd8>)
 8000846:	6a1b      	ldr	r3, [r3, #32]
 8000848:	4a18      	ldr	r2, [pc, #96]	@ (80008ac <USART2_config+0xd8>)
 800084a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800084e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (7 << 12); // PA3 AF7 (USART2_RX)
 8000850:	4b16      	ldr	r3, [pc, #88]	@ (80008ac <USART2_config+0xd8>)
 8000852:	6a1b      	ldr	r3, [r3, #32]
 8000854:	4a15      	ldr	r2, [pc, #84]	@ (80008ac <USART2_config+0xd8>)
 8000856:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 800085a:	6213      	str	r3, [r2, #32]

    USART2->CR1 = 0x00; // Clear all
 800085c:	4b14      	ldr	r3, [pc, #80]	@ (80008b0 <USART2_config+0xdc>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
    USART2->CR1 |= (1 << 13); // Enable USART2
 8000862:	4b13      	ldr	r3, [pc, #76]	@ (80008b0 <USART2_config+0xdc>)
 8000864:	68db      	ldr	r3, [r3, #12]
 8000866:	4a12      	ldr	r2, [pc, #72]	@ (80008b0 <USART2_config+0xdc>)
 8000868:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800086c:	60d3      	str	r3, [r2, #12]
    USART2->CR1 &= ~(1 << 12); // Word length 8 bits
 800086e:	4b10      	ldr	r3, [pc, #64]	@ (80008b0 <USART2_config+0xdc>)
 8000870:	68db      	ldr	r3, [r3, #12]
 8000872:	4a0f      	ldr	r2, [pc, #60]	@ (80008b0 <USART2_config+0xdc>)
 8000874:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000878:	60d3      	str	r3, [r2, #12]

    USART2->BRR = (1 << 0) | (24 << 4); // Baud rate
 800087a:	4b0d      	ldr	r3, [pc, #52]	@ (80008b0 <USART2_config+0xdc>)
 800087c:	f240 1281 	movw	r2, #385	@ 0x181
 8000880:	609a      	str	r2, [r3, #8]

    USART2->CR1 |= (1 << 2); // Enable receiver
 8000882:	4b0b      	ldr	r3, [pc, #44]	@ (80008b0 <USART2_config+0xdc>)
 8000884:	68db      	ldr	r3, [r3, #12]
 8000886:	4a0a      	ldr	r2, [pc, #40]	@ (80008b0 <USART2_config+0xdc>)
 8000888:	f043 0304 	orr.w	r3, r3, #4
 800088c:	60d3      	str	r3, [r2, #12]
    USART2->CR1 |= (1 << 3); // Enable transmitter
 800088e:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <USART2_config+0xdc>)
 8000890:	68db      	ldr	r3, [r3, #12]
 8000892:	4a07      	ldr	r2, [pc, #28]	@ (80008b0 <USART2_config+0xdc>)
 8000894:	f043 0308 	orr.w	r3, r3, #8
 8000898:	60d3      	str	r3, [r2, #12]
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020800 	.word	0x40020800
 80008ac:	40020000 	.word	0x40020000
 80008b0:	40004400 	.word	0x40004400

080008b4 <UART_getchar>:

uint8_t UART_getchar(void) {
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
    while (!(USART2->SR & (1 << 5))); // Wait for data to be received
 80008b8:	bf00      	nop
 80008ba:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <UART_getchar+0x20>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f003 0320 	and.w	r3, r3, #32
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d0f9      	beq.n	80008ba <UART_getchar+0x6>
    return USART2->DR;
 80008c6:	4b03      	ldr	r3, [pc, #12]	@ (80008d4 <UART_getchar+0x20>)
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	b2db      	uxtb	r3, r3
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr
 80008d4:	40004400 	.word	0x40004400

080008d8 <main>:
#include <stdlib.h>

// Function prototypes
void print_menu(void);

int main(void) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
    SysClockConfig();
 80008de:	f7ff fde3 	bl	80004a8 <SysClockConfig>
    USART2_config();
 80008e2:	f7ff ff77 	bl	80007d4 <USART2_config>
    LED_init();
 80008e6:	f7ff fe53 	bl	8000590 <LED_init>
    PWM_config();
 80008ea:	f7ff fec3 	bl	8000674 <PWM_config>

    char choice;

    while (1) {
        print_menu();
 80008ee:	f000 f82f 	bl	8000950 <print_menu>
        choice = UART_getchar();
 80008f2:	f7ff ffdf 	bl	80008b4 <UART_getchar>
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
        UART2_SendChar(choice);
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff ff3b 	bl	8000778 <UART2_SendChar>
        UART2_SendString("\n\r");
 8000902:	4810      	ldr	r0, [pc, #64]	@ (8000944 <main+0x6c>)
 8000904:	f7ff ff50 	bl	80007a8 <UART2_SendString>

        switch (choice) {
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	2b33      	cmp	r3, #51	@ 0x33
 800090c:	d00c      	beq.n	8000928 <main+0x50>
 800090e:	2b33      	cmp	r3, #51	@ 0x33
 8000910:	dc0f      	bgt.n	8000932 <main+0x5a>
 8000912:	2b31      	cmp	r3, #49	@ 0x31
 8000914:	d002      	beq.n	800091c <main+0x44>
 8000916:	2b32      	cmp	r3, #50	@ 0x32
 8000918:	d003      	beq.n	8000922 <main+0x4a>
 800091a:	e00a      	b.n	8000932 <main+0x5a>
            case '1':
                LED_Blinking();
 800091c:	f7ff fe78 	bl	8000610 <LED_Blinking>
                break;
 8000920:	e00b      	b.n	800093a <main+0x62>
            case '2':
            	start_PWM_output();
 8000922:	f7ff fee1 	bl	80006e8 <start_PWM_output>
                break;
 8000926:	e008      	b.n	800093a <main+0x62>
            case '3':
                UART2_SendString("Exiting utility...\n\r");
 8000928:	4807      	ldr	r0, [pc, #28]	@ (8000948 <main+0x70>)
 800092a:	f7ff ff3d 	bl	80007a8 <UART2_SendString>

                return 0;
 800092e:	2300      	movs	r3, #0
 8000930:	e004      	b.n	800093c <main+0x64>
            default:
                UART2_SendString("Invalid choice. Please try again.\n\r");
 8000932:	4806      	ldr	r0, [pc, #24]	@ (800094c <main+0x74>)
 8000934:	f7ff ff38 	bl	80007a8 <UART2_SendString>
                break;
 8000938:	bf00      	nop
        print_menu();
 800093a:	e7d8      	b.n	80008ee <main+0x16>
        }
    }
}
 800093c:	4618      	mov	r0, r3
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	08000a98 	.word	0x08000a98
 8000948:	08000a9c 	.word	0x08000a9c
 800094c:	08000ab4 	.word	0x08000ab4

08000950 <print_menu>:

void print_menu(void) {
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
    UART2_SendString("\n\rMenu:\n\r");
 8000954:	4808      	ldr	r0, [pc, #32]	@ (8000978 <print_menu+0x28>)
 8000956:	f7ff ff27 	bl	80007a8 <UART2_SendString>
    UART2_SendString("1. Multi-Delay LED Blinking\n\r");
 800095a:	4808      	ldr	r0, [pc, #32]	@ (800097c <print_menu+0x2c>)
 800095c:	f7ff ff24 	bl	80007a8 <UART2_SendString>
    UART2_SendString("2. LED Intensity control \n\r");
 8000960:	4807      	ldr	r0, [pc, #28]	@ (8000980 <print_menu+0x30>)
 8000962:	f7ff ff21 	bl	80007a8 <UART2_SendString>
    UART2_SendString("3. Exit\n\r");
 8000966:	4807      	ldr	r0, [pc, #28]	@ (8000984 <print_menu+0x34>)
 8000968:	f7ff ff1e 	bl	80007a8 <UART2_SendString>
    UART2_SendString("Enter your choice: ");
 800096c:	4806      	ldr	r0, [pc, #24]	@ (8000988 <print_menu+0x38>)
 800096e:	f7ff ff1b 	bl	80007a8 <UART2_SendString>
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	08000ad8 	.word	0x08000ad8
 800097c:	08000ae4 	.word	0x08000ae4
 8000980:	08000b04 	.word	0x08000b04
 8000984:	08000b20 	.word	0x08000b20
 8000988:	08000b2c 	.word	0x08000b2c

0800098c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800098c:	480d      	ldr	r0, [pc, #52]	@ (80009c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800098e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000990:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000994:	480c      	ldr	r0, [pc, #48]	@ (80009c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000996:	490d      	ldr	r1, [pc, #52]	@ (80009cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000998:	4a0d      	ldr	r2, [pc, #52]	@ (80009d0 <LoopForever+0xe>)
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800099c:	e002      	b.n	80009a4 <LoopCopyDataInit>

0800099e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800099e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009a2:	3304      	adds	r3, #4

080009a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a8:	d3f9      	bcc.n	800099e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009aa:	4a0a      	ldr	r2, [pc, #40]	@ (80009d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009ac:	4c0a      	ldr	r4, [pc, #40]	@ (80009d8 <LoopForever+0x16>)
  movs r3, #0
 80009ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b0:	e001      	b.n	80009b6 <LoopFillZerobss>

080009b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b4:	3204      	adds	r2, #4

080009b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b8:	d3fb      	bcc.n	80009b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009ba:	f000 f811 	bl	80009e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009be:	f7ff ff8b 	bl	80008d8 <main>

080009c2 <LoopForever>:

LoopForever:
  b LoopForever
 80009c2:	e7fe      	b.n	80009c2 <LoopForever>
  ldr   r0, =_estack
 80009c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009cc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80009d0:	08000b48 	.word	0x08000b48
  ldr r2, =_sbss
 80009d4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80009d8:	2000001c 	.word	0x2000001c

080009dc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009dc:	e7fe      	b.n	80009dc <ADC_IRQHandler>
	...

080009e0 <__libc_init_array>:
 80009e0:	b570      	push	{r4, r5, r6, lr}
 80009e2:	4d0d      	ldr	r5, [pc, #52]	@ (8000a18 <__libc_init_array+0x38>)
 80009e4:	4c0d      	ldr	r4, [pc, #52]	@ (8000a1c <__libc_init_array+0x3c>)
 80009e6:	1b64      	subs	r4, r4, r5
 80009e8:	10a4      	asrs	r4, r4, #2
 80009ea:	2600      	movs	r6, #0
 80009ec:	42a6      	cmp	r6, r4
 80009ee:	d109      	bne.n	8000a04 <__libc_init_array+0x24>
 80009f0:	4d0b      	ldr	r5, [pc, #44]	@ (8000a20 <__libc_init_array+0x40>)
 80009f2:	4c0c      	ldr	r4, [pc, #48]	@ (8000a24 <__libc_init_array+0x44>)
 80009f4:	f000 f818 	bl	8000a28 <_init>
 80009f8:	1b64      	subs	r4, r4, r5
 80009fa:	10a4      	asrs	r4, r4, #2
 80009fc:	2600      	movs	r6, #0
 80009fe:	42a6      	cmp	r6, r4
 8000a00:	d105      	bne.n	8000a0e <__libc_init_array+0x2e>
 8000a02:	bd70      	pop	{r4, r5, r6, pc}
 8000a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a08:	4798      	blx	r3
 8000a0a:	3601      	adds	r6, #1
 8000a0c:	e7ee      	b.n	80009ec <__libc_init_array+0xc>
 8000a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a12:	4798      	blx	r3
 8000a14:	3601      	adds	r6, #1
 8000a16:	e7f2      	b.n	80009fe <__libc_init_array+0x1e>
 8000a18:	08000b40 	.word	0x08000b40
 8000a1c:	08000b40 	.word	0x08000b40
 8000a20:	08000b40 	.word	0x08000b40
 8000a24:	08000b44 	.word	0x08000b44

08000a28 <_init>:
 8000a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a2a:	bf00      	nop
 8000a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a2e:	bc08      	pop	{r3}
 8000a30:	469e      	mov	lr, r3
 8000a32:	4770      	bx	lr

08000a34 <_fini>:
 8000a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a36:	bf00      	nop
 8000a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a3a:	bc08      	pop	{r3}
 8000a3c:	469e      	mov	lr, r3
 8000a3e:	4770      	bx	lr
